---
// src/components/SkillCard.astro
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardFooter,
} from '@/components/ui/card';
import {
  MonitorSmartphone,
  ServerCog,
  Database,
  PenTool,
  Network,
  Brain,
  BookOpen,
  type LucideIcon,
} from 'lucide-react';
import type { IconType } from 'react-icons';
import {
  SiReact,
  SiAngular,
  SiTypescript,
  SiAstro,
  SiTailwindcss,
  SiHtml5,
  SiCss3,
  SiJavascript,
  SiNodedotjs,
  SiBun,
  SiDeno,
  SiExpress,
  SiNestjs,
  SiHono,
  SiPython,
  SiPostgresql,
  SiMysql,
  SiMongodb,
  SiSqlite,
  SiPrisma,
  SiDrizzle,
  SiFigma,
  SiDocker,
  SiKubernetes,
  SiGit,
  SiAmazon,
  SiApachekafka,
  SiRedis,
  SiSpring,
  SiPytorch,
  SiOpenjdk,
  SiPrometheus,
  SiGrafana,
  SiClickhouse,
  SiCilium,
  SiRancher,
  SiDjango,
  SiCplusplus,
  SiKeycloak,
  SiLinux,
  SiVuedotjs,
  SiAndroid,
  SiOllama,
  SiWeightsandbiases,
  SiHuggingface,
  SiOpencv,
  SiFluentd,
  SiNatsdotio,
  SiGitlab,
  SiNginx,
  SiQt,
  SiCloudflare,
} from 'react-icons/si';

// Define the mapping from iconName to Lucide icon component
// Mapping for Lucide icons (general skill category)
const iconComponents: Record<string, LucideIcon> = {
  MonitorSmartphone,
  ServerCog,
  Database,
  PenTool,
  Network,
  Brain,
  BookOpen,
};

// Mapping for react-icons (specific technologies)
const techIconComponents: Record<string, IconType> = {
  react: SiReact,
  angular: SiAngular,
  typescript: SiTypescript,
  astro: SiAstro,
  tailwindcss: SiTailwindcss,
  html5: SiHtml5,
  css3: SiCss3,
  javascript: SiJavascript,
  nodejs: SiNodedotjs,
  bun: SiBun,
  deno: SiDeno,
  express: SiExpress,
  nestjs: SiNestjs,
  hono: SiHono,
  java: SiOpenjdk,
  python: SiPython,
  cpp: SiCplusplus,
  spring: SiSpring,
  django: SiDjango,
  pytorch: SiPytorch,
  huggingface: SiHuggingface,
  ollama: SiOllama,
  wandb: SiWeightsandbiases,
  computervision: SiOpencv, // Using OpenCV for computer vision
  postgresql: SiPostgresql,
  redis: SiRedis,
  kafka: SiApachekafka,
  nats: SiNatsdotio,
  clickhouse: SiClickhouse,
  mysql: SiMysql,
  mongodb: SiMongodb,
  sqlite: SiSqlite,
  prisma: SiPrisma,
  drizzleorm: SiDrizzle,
  figma: SiFigma,
  docker: SiDocker,
  kubernetes: SiKubernetes,
  prometheus: SiPrometheus,
  grafana: SiGrafana,
  fluentd: SiFluentd,
  cilium: SiCilium,
  rancher: SiRancher,
  keycloak: SiKeycloak,
  linux: SiLinux,
  vuejs: SiVuedotjs,
  android: SiAndroid,
  git: SiGit,
  amazonservices: SiAmazon,
  gitlab: SiGitlab,
  nginx: SiNginx,
  fleetcd: SiGitlab, // Using GitLab icon for FleetCD (GitOps)
  qt: SiQt,
  cloudflare: SiCloudflare,
};

// Define Technology type locally if not available from '@/data/skills'
type Technology = {
  id: string;
  name: string;
};

export type Props = {
  title: string;
  description: string;
  iconName: string;
  technologies?: Array<Technology>;
};

const { title, description, iconName, technologies = [] } = Astro.props;
const IconComponent = iconComponents[iconName];
---

<Card
  className="group relative overflow-hidden h-full hover:shadow-xl hover:-translate-y-1 transition-all duration-300 bg-card border border-border/50 hover:border-primary/30"
>
  <CardHeader className="pb-3 pt-4">
    <div class="flex items-center gap-3">
      <div class="relative">
        <div class="absolute inset-0 bg-primary/20 rounded-lg blur-sm"></div>
        <span class="relative inline-flex items-center justify-center p-2 bg-primary/10 rounded-lg border border-primary/20">
          <IconComponent className="size-5 text-primary" />
        </span>
      </div>
      <div class="flex-grow">
        <CardTitle className="text-lg font-semibold text-foreground group-hover:text-primary transition-colors duration-300">
          {title}
        </CardTitle>
      </div>
    </div>
  </CardHeader>

  <CardContent className="flex-grow px-4 pb-3">
    <p class="text-sm text-muted-foreground leading-relaxed">
      {description}
    </p>
  </CardContent>

  {
    technologies && technologies.length > 0 && (
      <CardFooter className="pt-3 pb-4 border-t border-border/50">
        <div class="w-full">
          <h4 class="text-xs font-medium text-muted-foreground mb-2 uppercase tracking-wider">Technologies</h4>
          <div class="flex flex-wrap gap-2">
            {technologies.map((tech) => {
              const TechIcon = techIconComponents[tech.id.toLowerCase()];
              return TechIcon ? (
                <div class="group/tech flex items-center gap-1.5 px-2 py-1.5 bg-muted/50 rounded-md hover:bg-primary/10 hover:scale-105 transition-all duration-200 cursor-pointer" title={tech.name}>
                  <TechIcon className="size-3.5 text-muted-foreground group-hover/tech:text-primary transition-colors" />
                  <span class="text-xs font-medium text-muted-foreground group-hover/tech:text-primary transition-colors">{tech.name}</span>
                </div>
              ) : null;
            })}
          </div>
        </div>
      </CardFooter>
    )
  }
</Card>
