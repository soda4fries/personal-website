---
import '../styles/global.css';
import { defaultLanguage, useTranslations, type LanguageCode } from '@/i18n/ui';
import Footer from '@/components/Footer.astro';
import Header from '@/components/Header.astro';
import BottomAppBar from '@/components/BottomAppBar.astro';
import { Home, FileText, User, MessageSquare } from 'lucide-react';
import { ClientRouter } from 'astro:transitions';

import { Toaster } from 'sonner';
import heroImage from '@/assets/user-hero.webp';
import { getImage } from 'astro:assets';

type Props = {
  pageTitle: string;
  pageDescription?: string;
  isContentPage?: boolean;
};

export type NavItem = {
  href: string;
  label: string;
  icon: any;
};

const { pageTitle, pageDescription, isContentPage = false } = Astro.props;
const lang =
  (Astro.currentLocale as LanguageCode | undefined) ?? defaultLanguage;

const tSite = useTranslations(lang, 'site');
const tNav = useTranslations(lang, 'nav');

const navItems: Array<NavItem> = [
  { href: '/', label: tNav('home'), icon: Home },
  { href: '/blog', label: tNav('blog'), icon: FileText },
  { href: '/about-me', label: tNav('aboutMe'), icon: User },
  { href: '/contact', label: tNav('contact'), icon: MessageSquare },
];

// Generate optimized hero images for preloading (matching BlogHomeScreen Image component config)
const heroImageOptimized1x = await getImage({
  src: heroImage,
  width: 600,
  height: 368,
  quality: 'high',
});

const heroImageOptimized15x = await getImage({
  src: heroImage,
  width: 900, // 600 * 1.5
  height: 552, // 368 * 1.5
  quality: 'high',
});

const heroImageOptimized2x = await getImage({
  src: heroImage,
  width: 1200, // 600 * 2
  height: 736, // 368 * 2
  quality: 'high',
});
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content={pageDescription || tSite('description')}
    />

    <link
      rel="icon"
      type="image/png"
      href="/favicons/light-mode/favicon-96x96.png"
      sizes="96x96"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="icon"
      type="image/png"
      href="/favicons/dark-mode/favicon-96x96.png"
      sizes="96x96"
      media="(prefers-color-scheme: dark)"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicons/light-mode/favicon.svg"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicons/dark-mode/favicon.svg"
      media="(prefers-color-scheme: dark)"
    />

    <link
      rel="shortcut icon"
      href="/favicons/light-mode/favicon.ico"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="shortcut icon"
      href="/favicons/dark-mode/favicon.ico"
      media="(prefers-color-scheme: dark)"
    />

    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/favicons/light-mode/apple-touch-icon.png"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/favicons/dark-mode/apple-touch-icon.png"
      media="(prefers-color-scheme: dark)"
    />

    <link
      rel="manifest"
      href="/favicons/light-mode/site.webmanifest"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="manifest"
      href="/favicons/dark-mode/site.webmanifest"
      media="(prefers-color-scheme: dark)"
    />

    <script is:inline>
      const getInitialTheme = () => {
        if (
          typeof localStorage !== 'undefined' &&
          localStorage.getItem('theme')
        ) {
          return localStorage.getItem('theme');
        }
        if (
          window.matchMedia &&
          window.matchMedia('(prefers-color-scheme: dark)').matches
        ) {
          return 'dark';
        }
        return 'light';
      };
      const theme = getInitialTheme();
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      }
      // Ensure localStorage is consistent if theme was derived from prefers-color-scheme
      // or if localStorage was empty.
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', theme);
      }
    </script>
    <title>{pageTitle || tSite('title')}</title>

    <!-- {/* Font, for example Google Fonts - to adapt according to your choices */}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    /> -->

    <!-- Preload hero image for LCP optimization with responsive srcset -->
    <link
      rel="preload"
      as="image"
      href={heroImageOptimized1x.src}
      imagesrcset={`${heroImageOptimized1x.src} 1x, ${heroImageOptimized15x.src} 1.5x, ${heroImageOptimized2x.src} 2x`}
    />

    <ClientRouter />
  </head>
  <body
    class={`h-[100dvh] bg-background font-sans antialiased flex flex-col ${isContentPage ? 'content-page' : ''}`}
  >
    <div class="animated-background">
      <div class="tech-grid"></div>
      <div class="flowing-lines">
        <div class="line line-1"></div>
        <div class="line line-2"></div>
        <div class="line line-3"></div>
        <div class="line line-4"></div>
        <div class="line line-5"></div>
        <div class="line line-6"></div>
      </div>
      <div class="data-nodes">
        <div class="node node-1"></div>
        <div class="node node-2"></div>
        <div class="node node-3"></div>
        <div class="node node-4"></div>
      </div>
      <div class="stars">
        <div class="star star-1"></div>
        <div class="star star-2"></div>
        <div class="star star-3"></div>
        <div class="star star-4"></div>
        <div class="star star-5"></div>
        <div class="star star-6"></div>
        <div class="star star-7"></div>
        <div class="star star-8"></div>
        <div class="star star-9"></div>
        <div class="star star-10"></div>
      </div>
    </div>
    {/* Tailwind classes for the body */}
    <header class="hidden md:block">
      <!-- passer aussi navItems mais sans le premier element dont le href === '/' -->
      <Header
        navItems={navItems.filter((item) => item.href !== '/') as NavItem[]}
      />
    </header>

    <main
      class="container mx-auto px-4 py-8 flex-1 max-w-screen-2xl pb-20 md:pb-8"
    >
      <slot />
    </main>
    <div class="hidden md:block">
      <Footer />
    </div>
    <BottomAppBar navItems={navItems} />
    <Toaster position="bottom-right" richColors client:load />
  </body>
</html>
