---
// src/features/blog/screens/BlogPostDetailScreen.astro
import Heading from '@/components/Heading.astro';
import { buttonVariants } from '@/components/ui/button';
import type { LanguageCode } from '@/i18n/ui';
import { useTranslations } from '@/i18n/ui';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { formatDate } from '@/lib/utils';
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { ArrowLeft, Clock, Pencil } from 'lucide-react';
import BlogPostCard from '../components/BlogPostCard.astro';
import TableOfContents, { type Heading as TocHeading } from '../components/TableOfContents.astro';

type Props = {
  post: CollectionEntry<'blog'>['data'];
  lang: LanguageCode;
  relatedPosts: Array<CollectionEntry<'blog'>>;
  filePath: string;
  headings?: TocHeading[];
};

const { post, lang, relatedPosts, filePath, headings = [] } = Astro.props;

// Construct the GitHub edit URL
const GITHUB_USER = 'YOUR_GITHUB_USERNAME';
const GITHUB_REPO = 'YOUR_GITHUB_REPO';
const GITHUB_BRANCH = 'YOUR_GITHUB_BRANCH';
const editUrl = `https://github.com/${GITHUB_USER}/${GITHUB_REPO}/edit/${GITHUB_BRANCH}/${filePath}`;

const pubDate = new Date(post.pubDate);
const updatedDate = post.updatedDate ? new Date(post.updatedDate) : null;

const t = useTranslations(lang, 'blogPost');

const pageTitle = post.title;
const pageDescription = post.description;
---

<BaseLayout {pageTitle} {pageDescription} isContentPage={true}>
  <article class="container mx-auto px-4 py-8 md:py-12 max-w-3xl">
    <a
      href={getRelativeLocaleUrl(lang, '/blog')}
      class={buttonVariants({ variant: 'ghost' }) + ' mb-6 no-underline'}
    >
      <ArrowLeft className="mr-2 size-4" />
      {t('backToList')}
    </a>

    <header class="mb-8">
      <Heading title={post.title} titleClassName="md:text-5xl" />
      <div class="mt-3 text-sm text-muted-foreground flex flex-col sm:flex-row sm:items-center sm:justify-between gap-1 sm:gap-4">
        <p class="flex items-center gap-1">
          <b>{t('publishedOn')}</b>
          <span>{formatDate(pubDate, lang)}</span>
          {
            updatedDate && (
              <>
                <span class="font-medium ml-2">({t('updatedOn')}</span>
                <span>{formatDate(updatedDate, lang)})</span>
              </>
            )
          }
        </p>
        <p class="flex items-center gap-1">
          <Clock className="size-4 flex-shrink-0" />
          <span>{post.readingTimeMinutes} {t('readingTimeSuffix')}</span>
        </p>
      </div>

      {
        post.heroImage && (
          <Image
            src={post.heroImage.url}
            alt={post.heroImage.alt}
            class="w-full h-auto object-cover rounded-lg my-6 shadow-lg"
            width={768}
            height={432}
          />
        )
      }
      {
        post.tags && post.tags.length > 0 && (
          <div class="mt-4 flex flex-wrap gap-2">
            {post.tags.map((tag: string) => (
              <span class="px-3 py-1 text-xs font-medium bg-muted text-muted-foreground rounded-full transition-colors hover:bg-primary hover:text-primary-foreground">
                {tag}
              </span>
            ))}
          </div>
        )
      }
    </header>

    <!-- Table of Contents -->
    <TableOfContents {lang} {headings} />

    <div class="prose prose-lg dark:prose-invert max-w-none mx-auto">
      <slot />

      <div class="flex justify-end">
        <a
          href={editUrl}
          target="_blank"
          rel="noopener noreferrer"
          class={buttonVariants({ variant: 'ghost' }) + ' hover:underline'}
        >
          <Pencil className=" size-4" />
          {t('editOnGithub') || 'Proposer une modification sur GitHub'}
        </a>
      </div>
    </div>

    <!-- Related Posts Section -->
    {
      relatedPosts.length > 0 ? (
        <section class="mt-12 pt-8 border-t border-border">
          <Heading
            title={t('relatedPostsTitle')}
            titleClassName="md:text-2xl font-semibold"
          />
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            {relatedPosts.map((relatedPost) => (
              <BlogPostCard post={relatedPost} lang={lang} />
            ))}
          </div>
        </section>
      ) : null
    }
  </article>

  <script>
    document.addEventListener('astro:page-load', () => {
      // TOC functionality - runs after all content is rendered
      const tocLinks = document.querySelectorAll('.toc-link');
      
      if (tocLinks.length > 0) {
        // Scroll highlighting with improved stability
        let currentActiveId = '';
        function highlightCurrentSection() {
          const scrollPosition = window.scrollY + 100; // Reduced offset for better precision
          // Only select headings that have IDs (from our TOC)
          const headings = Array.from(document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]'))
            .filter(h => h.id) // Ensure they have IDs
            .sort((a, b) => (a as HTMLElement).offsetTop - (b as HTMLElement).offsetTop) as HTMLElement[]; // Sort by position on page
          
          if (headings.length === 0) return;
          
          let newActiveId = '';
          
          // Find current heading based on scroll position with better logic
          for (let i = 0; i < headings.length; i++) {
            const heading = headings[i];
            const nextHeading = headings[i + 1];
            
            if (scrollPosition >= heading.offsetTop - 50) {
              if (!nextHeading || scrollPosition < nextHeading.offsetTop - 50) {
                newActiveId = heading.id;
                break;
              }
            }
          }
          
          // If no heading found and we're at the top, use first heading
          if (!newActiveId && scrollPosition < headings[0].offsetTop) {
            newActiveId = headings[0].id;
          }
          
          // Only update if the active section has actually changed
          if (newActiveId !== currentActiveId) {
            // Remove previous highlighting
            if (currentActiveId) {
              tocLinks.forEach(link => {
                const href = link.getAttribute('href');
                if (href === `#${currentActiveId}`) {
                  link.classList.remove('bg-primary', 'text-primary-foreground');
                  link.classList.add('text-muted-foreground');
                }
              });
            }
            
            // Add new highlighting
            if (newActiveId) {
              tocLinks.forEach(link => {
                const href = link.getAttribute('href');
                if (href === `#${newActiveId}`) {
                  link.classList.remove('text-muted-foreground');
                  link.classList.add('bg-primary', 'text-primary-foreground');
                }
              });
            }
            
            currentActiveId = newActiveId;
          }
        }
        
        // Smooth scroll and mobile TOC close
        tocLinks.forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href')?.substring(1);
            const target = targetId ? document.getElementById(targetId) : null;
            if (target) {
              target.scrollIntoView({ behavior: 'smooth', block: 'start' });
              if (window.innerWidth < 1024) {
                const details = document.querySelector('#mobile-toc details') as HTMLDetailsElement;
                if (details) details.open = false;
              }
            }
          });
        });

        // Initialize highlighting - ensure all links start with correct classes
        tocLinks.forEach(link => {
          link.classList.add('text-muted-foreground');
        });
        highlightCurrentSection();
        
        // Scroll event with improved throttling
        let scrollTimeout: ReturnType<typeof setTimeout>;
        let ticking = false;
        
        window.addEventListener('scroll', () => {
          // Clear any existing timeout
          clearTimeout(scrollTimeout);
          
          // Immediate update with throttling
          if (!ticking) {
            requestAnimationFrame(() => {
              highlightCurrentSection();
              ticking = false;
            });
            ticking = true;
          }
          
          // Debounced final update to ensure we don't miss anything
          scrollTimeout = setTimeout(() => {
            highlightCurrentSection();
          }, 150);
        });
      }
    });
  </script>
</BaseLayout>
