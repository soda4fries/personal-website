---
import { Badge } from '@/components/ui/badge';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import type { LanguageCode } from '@/i18n/ui';
import { useTranslations } from '@/i18n/ui';
import { formatDate } from '@/lib/utils';
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { Clock, ChevronRight } from 'lucide-react';

interface Props {
  post: CollectionEntry<'blog'>;
  lang: LanguageCode;
}

const { post, lang } = Astro.props;
const t = useTranslations(lang, 'blogPost');
---

<a
  href={getRelativeLocaleUrl(lang, `/blog/${post.id}`)}
  class="group block rounded-xl border border-border/50 bg-card text-card-foreground shadow-sm transition-all duration-300 hover:shadow-lg hover:border-primary/20 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 overflow-hidden h-full"
>
  <Card
    className="group bg-transparent border-none transition-none shadow-none pt-0 h-full flex flex-col"
  >
    {
      post.data.heroImage ? (
        <div class="w-full h-48 overflow-hidden rounded-t-xl flex-shrink-0">
          <Image
            src={post.data.heroImage.url}
            alt={post.data.heroImage.alt}
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
            width={768}
            height={432}
            densities={[1, 1.5, 2]}
            quality="mid"
          />
        </div>
      ) : (
        <div class="w-full h-12 bg-muted" />
      )
    }
    <CardHeader className="flex-shrink-0">
      <CardTitle
        className="text-xl font-semibold line-clamp-1 group-hover:text-primary transition-colors"
      >
        {post.data.title}
      </CardTitle>
      <CardDescription className="space-y-1">
        <p class="text-xs">{t('publishedOn') + formatDate(post.data.pubDate, lang)}</p>
        {
          post.data.readingTimeMinutes != null ? (
            <p class="flex items-center text-xs">
              <Clock className="mr-1 size-3 flex-shrink-0" />
              {post.data.readingTimeMinutes} {t('readingTimeSuffix')}
            </p>
          ) : null
        }
      </CardDescription>
    </CardHeader>
    <CardContent className="flex-grow space-y-2 flex-shrink-0">
      {
        post.data.description && (
          <p class="text-sm text-muted-foreground line-clamp-2">
            {post.data.description}
          </p>
        )
      }
      {
        post.data.tags && post.data.tags.length > 0 && (
          <div class="flex gap-2 pt-2 line-clamp-1">
            {post.data.tags.slice(0, 3).map((tag: string) => (
              <Badge variant="secondary" key={tag} className="text-xs">
                {tag}
              </Badge>
            ))}
            {post.data.tags.length > 3 && (
              <Badge variant="secondary" key="more" className="text-xs">
                +{post.data.tags.length - 3}
              </Badge>
            )}
          </div>
        )
      }
    </CardContent>
    <CardFooter className="mt-auto flex-shrink-0">
      <span class="text-sm text-primary font-medium group-hover:underline">
        {t('readMore')}
        <ChevronRight
          className="ml-1 size-4 transition-transform group-hover:translate-x-0.5"
        />
      </span>
    </CardFooter>
      <!-- Effect hover  -->
    <div
      class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none rounded-xl"
    >
    </div>
  </Card>
</a>
