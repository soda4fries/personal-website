---
import { BlogPostDetailScreen } from '@/features/blog';
import { defaultLanguage, type LanguageCode } from '@/i18n/ui';
import { getCollection, getEntries, render } from 'astro:content';

let lang = defaultLanguage as LanguageCode;

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog', ({ data }) => {
    return data.isDraft !== true && data.lang === defaultLanguage;
  });
  return blogEntries.map((post) => ({
    params: { slug: post.id },
    props: { post },
  }));
}
const { post } = Astro.props;

const baseRelatedPosts = post.data.relatedPosts
  ? await getEntries(post.data.relatedPosts)
  : [];

const enrichedRelatedPostsPromises = baseRelatedPosts.map(
  async (relatedEntry) => {
    if (!relatedEntry) return null;
    const { remarkPluginFrontmatter: relatedFm } = await render(relatedEntry);
    return {
      id: relatedEntry.id,
      slug: relatedEntry.id,
      collection: relatedEntry.collection,
      data: {
        ...relatedEntry.data,
        readingTimeMinutes: relatedFm.readingTimeMinutes,
      },
    };
  }
);
const finalRelatedPosts = (
  await Promise.all(enrichedRelatedPostsPromises)
).filter((p) => p !== null);

const { Content, remarkPluginFrontmatter } = await render(post);

// Extract headings from the MDX content for TOC
function extractHeadings(content: string) {
  const headings: Array<{ id: string; text: string; level: number }> = [];
  
  // First, remove code blocks to avoid detecting # inside them
  // Remove fenced code blocks (```...```)
  let cleanContent = content.replace(/```[\s\S]*?```/g, '');
  
  // Remove inline code (`...`)
  cleanContent = cleanContent.replace(/`[^`\n]*`/g, '');
  
  // Now extract headings from the cleaned content
  const headingRegex = /^(#{1,6})\s+(.*)$/gm;
  let match: RegExpExecArray | null;
  
  while ((match = headingRegex.exec(cleanContent)) !== null) {
    const level = match[1].length;
    const text = match[2].trim();
    const id = text.toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    headings.push({ id, text, level });
  }
  
  return headings;
}

// Get raw content from the MDX file to extract headings
const headings = extractHeadings(post.body || '');
---

<BlogPostDetailScreen
  post={{
    ...post.data,
    readingTimeMinutes: remarkPluginFrontmatter.readingTimeMinutes,
  }}
  lang={lang}
  relatedPosts={finalRelatedPosts}
  filePath={post.filePath ? post.filePath : ''}
  headings={headings}
>
  <Content />
</BlogPostDetailScreen>
